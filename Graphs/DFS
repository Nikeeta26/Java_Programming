package nikeeta;

import java.util.ArrayList;

import nikeeta.Graphs.Edge;

public class DFS {

	public static class Edge{
		int s; 
		int d;
		int w;
		
		 Edge(int s, int d, int w) {
			this.s = s;
			this.d = d;
			this.w = w;
		}
		
	}
	
	public static void CreateGraph(ArrayList<Edge> graph[] ) {
		for(int i=0; i<graph.length; i++) {
			graph[i] = new ArrayList<Edge>();
		}
		
		    graph[0].add(new Edge(0, 1, 1));
	        graph[0].add(new Edge(0, 2, 1));
	        graph[1].add(new Edge(1, 0, 1));
	        graph[1].add(new Edge(1, 3, 1));
	        graph[2].add(new Edge(2, 0, 1));
	        graph[2].add(new Edge(2, 4, 1));
	        graph[3].add(new Edge(3, 1, 1));
	        graph[3].add(new Edge(3, 4, 1));
	        graph[3].add(new Edge(3, 5, 1));
	        graph[4].add(new Edge(4, 2, 1));
	        graph[4].add(new Edge(4, 3, 1));
	        graph[4].add(new Edge(4, 5, 1));
	        graph[5].add(new Edge(5, 3, 1));
	        graph[5].add(new Edge(5, 4, 1));
	        graph[5].add(new Edge(5, 6, 1));
	        graph[5].add(new Edge(6, 5, 1));
			
	}
	
	public static void dfs(ArrayList<Edge> edge[],int curr, boolean vis[]) {
		
		System.out.println(curr);
		vis[curr] = true;
		
		for(int i=0; i<edge[curr].size(); i++) {
			Edge e = edge[curr].get(i);
			
			if(vis[e.d] == false) {
				dfs(edge,e.d,vis);
			}
		}
		
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub

		int v = 7;
		ArrayList<Edge> graph[] = new ArrayList[v];
		
		boolean[] vis = new boolean[v];
		CreateGraph(graph);
		
		// for disconnect graph
		/*for(int i=0; i<graph.length; i++) {
			if(vis[i] == false) {
				dfs(graph, 0, vis);
			}
		}*/
		
		dfs(graph, 0, vis);
		System.out.println();
	}

}
